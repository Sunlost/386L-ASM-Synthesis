#lang rosette/safe

(require rackunit)
(require "../common.rkt" "../../src/isa/riscv.rkt" "../../src/state.rkt")

; ----------------------------------------------------------------------------------------------- ;
; ------------------------------------- RISC-V -------------------------------------------------- ;
; ----------------------------------------------------------------------------------------------- ;

(module+ test

; ----------------------------------------------------------------------------------------------- ;
; ------------------------------------- Test 1 -------------------------------------------------- ;
; ----------------------------------------------------------------------------------------------- ;



; ----------------------------------------------------------------------------------------------- ;
; ------------------------------------- Test 2 -------------------------------------------------- ;
; ----------------------------------------------------------------------------------------------- ;



; ----------------------------------------------------------------------------------------------- ;
; ------------------------------------- Test 3 -------------------------------------------------- ;
; ----------------------------------------------------------------------------------------------- ;

(define riscv-prog-3
    (list
        ; Program 3 (RISC-V)
        (5_XOR x0 x0 x0)          ; 2000
        (5_XOR x1 x1 x1)          ; 2004
        (5_ADDI x0 (imm5 12) x0)  ; 2008
        (5_ADDI x1 (imm5 15) x1)  ; 2012
        ; L1.
        (5_BGE x1 x0 (imm12 12))  ; 2016: BGEU x1 x0 .L2
        (5_ADDI x0 (imm5 1) x0)   ; 2020
        HLT                       ; 2024
        ; L2.
        (5_AND x0 x1 x1)          ; 2028
        (5_BEQ x0 x1 (imm12 -12)) ; 2032: BEQ  x0 x1 .L1
    )
)

(define riscv-test-3
    (set-instrs test-state-1 (addr 2000) riscv-prog-3)
)

(let ([final-state (eval-riscv-prog-state riscv-test-3)])
    (check-equal?          (final-state x0) (val 13))      ; altered from starting state
    (check-equal?          (final-state x1) (val 12))      ; altered from starting state
    (check-equal?          (final-state PC) (addr 2024))   ; altered from starting state
)

; ----------------------------------------------------------------------------------------------- ;
; ------------------------------------- Test 4 -------------------------------------------------- ;
; ----------------------------------------------------------------------------------------------- ;

(define riscv-prog-4
    (list
        ; Program 4 (RISC-V)
        (5_XOR x0 x0 x0)         ; 2000
        (5_ADDI x0 (imm5 1) x0)  ; 2004
        (5_ADDI x0 (imm5 1) x0)  ; 2008
        (5_JAL (addr 2024) x7)   ; 2012
        (5_ADDI x0 (imm5 1) x0)  ; 2016
        HLT                      ; 2020

        (5_ADDI x0 (imm5 1) x0)  ; 2024
        (5_JALR x7 (imm12 0) x1) ; 2028: return
    )
)

(define riscv-test-4
    (set-instrs test-state-1 (addr 2000) riscv-prog-4)
)

(let ([final-state (eval-riscv-prog-state riscv-test-4)])
    (check-equal?          (final-state x0) (val 4))      ; altered from starting state
    (check-equal?          (final-state x1) (addr 2032))  ; altered from starting state
    (check-equal?          (final-state x7) (addr 2016))  ; altered from starting state
)

) ; /module+ test
