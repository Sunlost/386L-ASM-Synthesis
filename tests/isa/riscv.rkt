#lang rosette/safe

(require rackunit)
(require "../common.rkt" "../../src/isa/riscv.rkt" "../../src/state.rkt")

; ----------------------------------------------------------------------------------------------- ;
; ------------------------------------- RISC-V -------------------------------------------------- ;
; ----------------------------------------------------------------------------------------------- ;

(module+ test

; ----------------------------------------------------------------------------------------------- ;
; ------------------------------------- Test 1 -------------------------------------------------- ;
; ----------------------------------------------------------------------------------------------- ;



; ----------------------------------------------------------------------------------------------- ;
; ------------------------------------- Test 2 -------------------------------------------------- ;
; ----------------------------------------------------------------------------------------------- ;



; ----------------------------------------------------------------------------------------------- ;
; ------------------------------------- Test 3 -------------------------------------------------- ;
; ----------------------------------------------------------------------------------------------- ;

(define riscv-prog-3
    (list
        ; Program 3 (RISC-V)
        (5_XOR x0 x0 x0)          ;  0
        (5_XOR x1 x1 x1)          ;  4
        (5_ADDI x0 (imm5 12) x0)  ;  8
        (5_ADDI x1 (imm5 15) x1)  ; 12
        ; L1.
        (5_BGE x1 x0 (imm12 12))  ; 16: BGEU x1 x0 .L2
        (5_ADDI x0 (imm5 1) x0)   ; 20
        HLT                       ; 24
        ; L2.
        (5_AND x0 x1 x1)          ; 28
        (5_BEQ x0 x1 (imm12 -12)) ; 32: BEQ  x0 x1 .L1
    )
)

(let ([final-state (eval-riscv-prog* riscv-prog-3 test-state-1)])
    (check-equal?          (final-state x0) (val 13))      ; altered from starting state
    (check-equal?          (final-state x1) (val 12))      ; altered from starting state
    (check-equal?          (final-state PC) (addr 24))     ; altered from starting state
)

; ----------------------------------------------------------------------------------------------- ;
; ------------------------------------- Test 4 -------------------------------------------------- ;
; ----------------------------------------------------------------------------------------------- ;

(define riscv-prog-4
    ; Add x0 to itself (i.e. multiply by 2)
    ;
    ; This tests that symbolic instructions don't get messed with.
    (list
        (5_ADD     x0 x0 x0)     ;  0
        HLT                      ;  4
    )
)

(let ([final-x0 (eval-riscv-prog riscv-prog-4 initial-state)])
    ; (displayln (format "[DEBUG] After  x0: ~a" final_x0))
    (check-equal? final-x0 (bvadd input_x0 input_x0))
)

; ----------------------------------------------------------------------------------------------- ;
; ------------------------------------- Test 6 -------------------------------------------------- ;
; ----------------------------------------------------------------------------------------------- ;

(define riscv-prog-5
    (list
        ; Program 5 (RISC-V)
        (5_XOR x0 x0 x0)         ;  0
        (5_ADDI x0 (imm5 1) x0)  ;  4
        (5_ADDI x0 (imm5 1) x0)  ;  8
        (5_JAL    (addr 24) x7)  ; 12
        (5_ADDI x0 (imm5 1) x0)  ; 16
        HLT                      ; 20

        (5_ADDI x0 (imm5 1) x0)  ; 24
        (5_JALR x7 (imm12 0) x1) ; 28: return
    )
)

(let ([final-state (eval-riscv-prog* riscv-prog-5 test-state-1)])
    (check-equal?          (final-state x0) (val 4))   ; altered from starting state
    (check-equal?          (final-state x1) (val 32))  ; altered from starting state
    (check-equal?          (final-state x7) (val 16))  ; altered from starting state
)

) ; /module+ test
